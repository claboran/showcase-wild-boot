<!--
    JBoss, Home of Professional Open Source
    Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:p="http://primefaces.org/ui"
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    xmlns:b="http://bootsfaces.net/ui"
    template="/WEB-INF/templates/default-prime.xhtml">
                
    <ui:define name="content">
    <b:container>
			<b:well id="info-box" class="about-info">
			<p>
				<i class="fa fa-info-circle fa-4x"></i> <h3>Remarks and some thoughts</h3>
			</p>
			<p>
				The intention of this small project was to come up with JEE7 Webapplication based on BootsFaces and PrimeFaces as starter. There are several approaches integrating Bootstrap into your JSF
				application:
				<ol>
					<li>
						Use <b>Bootstrap</b> in conjunction with plain JSF (2.x) standard and add custom component as needed (e.g Datepicker). This is the most flexible approach you do not
						rely on any JSF Component libraries, but for more advanced Widgets there is the demand of implementing these widgets on your own eg. composite components. JSF2.2 new HTML5 features 
						might help. An article in German JavaMagazin tries to show this approach: <a href="https://jaxenter.de/ausgaben/java-magazin-8-14">Frischzellenkur by Philipp Bayer and myself</a>.
						Example code on Github 
						<a href="https://github.com/claboran/jsf-bootstrap-demo"><i class="fa fa-github fa-1x"></i> jsf-bootstrap-demo</a> 
					</li>
					<li>
						Use <b>BootsFaces</b> - an interesting and young project. Pushing integration between JSF and Bootstrap a step further. BootsFaces integrates well with other JSF Component libraries.
						Especially the integration with PrimeFaces is an option to mix best of both worlds. The available options are very good explained here: <a href="http://bootsfaces.net/integration/PrimeFaces.jsf">Integration with PrimeFaces</a>
					</li>
				</ol>   
        	</p>
        	<p>
        		The example code has been taken from the WildFly JEE7 Archetype of Pete Muir <a href="https://github.com/wildfly/wildfly-archetypes/tree/master/wildfly-javaee7-webapp-archetype"><i class="fa fa-github fa-1x"></i> WildFly JEE7 Archetype</a>
        		I did only some slight modifications (lombok and Hamcrest matchers) to keep the example as close to the archetype as possible. Finally to say this is no contribution of Red Hat eventhough I kept the copyright Headers in the code.
        	</p>
			</b:well>
		</b:container>
    </ui:define>
</ui:composition>
